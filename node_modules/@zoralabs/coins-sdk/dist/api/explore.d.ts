import type { GetExploreData, GetExploreResponse } from "../client/types.gen";
import { RequestOptionsType } from "./query-types";
/**
 * The inner type for the explore queries that omits listType.
 * This is used to create the query object for the explore queries.
 */
export type QueryRequestType = Omit<GetExploreData["query"], "listType">;
type ExploreResponse = {
    data?: GetExploreResponse;
};
export type ListType = GetExploreData["query"]["listType"];
export type { ExploreResponse };
export type { GetExploreData };
/** Get top gaining coins */
export declare const getCoinsTopGainers: (query?: QueryRequestType, options?: RequestOptionsType<GetExploreData>) => Promise<ExploreResponse>;
/** Get coins with highest 24h volume */
export declare const getCoinsTopVolume24h: (query?: QueryRequestType, options?: RequestOptionsType<GetExploreData>) => Promise<ExploreResponse>;
/** Get most valuable coins */
export declare const getCoinsMostValuable: (query?: QueryRequestType, options?: RequestOptionsType<GetExploreData>) => Promise<ExploreResponse>;
/** Get newly created coins */
export declare const getCoinsNew: (query?: QueryRequestType, options?: RequestOptionsType<GetExploreData>) => Promise<ExploreResponse>;
/** Get recently traded coins */
export declare const getCoinsLastTraded: (query?: QueryRequestType, options?: RequestOptionsType<GetExploreData>) => Promise<ExploreResponse>;
/** Get recently traded unique coins */
export declare const getCoinsLastTradedUnique: (query?: QueryRequestType, options?: RequestOptionsType<GetExploreData>) => Promise<ExploreResponse>;
//# sourceMappingURL=explore.d.ts.map