import { zoraFactoryImplABI } from "@zoralabs/coins";
import { Address, TransactionReceipt, WalletClient, SimulateContractParameters, ContractEventArgsFromTopics } from "viem";
import { GenericPublicClient } from "src/utils/genericPublicClient";
import { ValidMetadataURI } from "src/metadata";
export type CoinDeploymentLogArgs = ContractEventArgsFromTopics<typeof zoraFactoryImplABI, "CoinCreated">;
export type CreateCoinArgs = {
    name: string;
    symbol: string;
    uri: ValidMetadataURI;
    owners?: Address[];
    tickLower?: number;
    payoutRecipient: Address;
    platformReferrer?: Address;
    initialPurchaseWei?: bigint;
};
export declare function createCoinCall({ name, symbol, uri, owners, payoutRecipient, initialPurchaseWei, tickLower, platformReferrer, }: CreateCoinArgs): Promise<SimulateContractParameters<typeof zoraFactoryImplABI, "deploy">>;
/**
 * Gets the deployed coin address from transaction receipt logs
 * @param receipt Transaction receipt containing the CoinCreated event
 * @returns The deployment information if found
 */
export declare function getCoinCreateFromLogs(receipt: TransactionReceipt): CoinDeploymentLogArgs | undefined;
export declare function createCoin(call: CreateCoinArgs, walletClient: WalletClient, publicClient: GenericPublicClient, options?: {
    gasMultiplier?: number;
}): Promise<{
    hash: `0x${string}`;
    receipt: any;
    address: `0x${string}` | undefined;
    deployment: {
        caller: `0x${string}`;
        payoutRecipient: `0x${string}`;
        platformReferrer: `0x${string}`;
        currency: `0x${string}`;
        uri: string;
        name: string;
        symbol: string;
        coin: `0x${string}`;
        pool: `0x${string}`;
        version: string;
    } | undefined;
}>;
//# sourceMappingURL=createCoin.d.ts.map