import { coinABI } from "@zoralabs/coins";
import { Address, TransactionReceipt, WalletClient, SimulateContractParameters, ContractEventArgsFromTopics } from "viem";
import { GenericPublicClient } from "src/utils/genericPublicClient";
export type SellEventArgs = ContractEventArgsFromTopics<typeof coinABI, "CoinSell">;
export type BuyEventArgs = ContractEventArgsFromTopics<typeof coinABI, "CoinBuy">;
export type TradeEventArgs = SellEventArgs | BuyEventArgs;
/**
 * Simulates a buy order to get the expected output amount
 * @param {Object} params - The simulation parameters
 * @param {Address} params.target - The target coin contract address
 * @param {bigint} params.requestedOrderSize - The desired input amount for the buy
 * @param {PublicClient} params.publicClient - The viem public client instance
 * @returns {Promise<{orderSize: bigint, amountOut: bigint}>} The simulated order size and output amount
 */
export declare function simulateBuy({ target, requestedOrderSize, publicClient, }: {
    target: Address;
    requestedOrderSize: bigint;
    publicClient: GenericPublicClient;
}): Promise<{
    orderSize: bigint;
    amountOut: bigint;
}>;
/**
 * Parameters for creating a trade call
 * @typedef {Object} TradeParams
 * @property {'sell' | 'buy'} direction - The trade direction
 * @property {Address} target - The target coin contract address
 * @property {Object} args - The trade arguments
 * @property {Address} args.recipient - The recipient of the trade output
 * @property {bigint} args.orderSize - The size of the order
 * @property {bigint} [args.minAmountOut] - The minimum amount to receive
 * @property {bigint} [args.sqrtPriceLimitX96] - The price limit for the trade
 * @property {Address} [args.tradeReferrer] - The referrer address for the trade
 */
export type TradeParams = {
    direction: "sell" | "buy";
    target: Address;
    args: {
        recipient: Address;
        orderSize: bigint;
        minAmountOut?: bigint;
        sqrtPriceLimitX96?: bigint;
        tradeReferrer?: Address;
    };
};
/**
 * Creates a trade call parameters object for buy or sell
 * @param {TradeParams} params - The trade parameters
 * @returns {SimulateContractParameters} The contract call parameters
 */
export declare function tradeCoinCall({ target, direction, args: { recipient, orderSize, minAmountOut, sqrtPriceLimitX96, tradeReferrer, }, }: TradeParams): SimulateContractParameters;
/**
 * Gets the trade event from transaction receipt logs
 * @param {TransactionReceipt} receipt - The transaction receipt containing the logs
 * @param {'buy' | 'sell'} direction - The direction of the trade
 * @returns {TradeEventArgs | undefined} The decoded trade event args if found
 */
export declare function getTradeFromLogs(receipt: TransactionReceipt, direction: "buy" | "sell"): TradeEventArgs | undefined;
/**
 * Executes a trade transaction
 * @param {TradeParams} params - The trade parameters
 * @param {PublicClient} publicClient - The viem public client instance
 * @param {WalletClient} walletClient - The viem wallet client instance
 * @returns {Promise<{
 *   hash: `0x${string}`,
 *   receipt: TransactionReceipt,
 *   trade: TradeEventArgs | undefined
 * }>} The transaction result with trade details
 */
export declare function tradeCoin(params: TradeParams, walletClient: WalletClient, publicClient: GenericPublicClient): Promise<{
    hash: `0x${string}`;
    receipt: any;
    trade: TradeEventArgs | undefined;
}>;
//# sourceMappingURL=tradeCoin.d.ts.map