import { GenericPublicClient } from "../utils/genericPublicClient";
import { Address } from "viem";
type Slot0Result = {
    sqrtPriceX96: bigint;
    tick: number;
    observationIndex: number;
    observationCardinality: number;
    observationCardinalityNext: number;
    feeProtocol: number;
    unlocked: boolean;
};
type PricingResult = {
    eth: bigint;
    usdc: bigint | null;
    usdcDecimal: number | null;
    ethDecimal: number;
};
/**
 * Represents the current state of a coin
 * @typedef {Object} OnchainCoinDetails
 * @property {bigint} balance - The user's balance of the coin
 * @property {PricingResult} marketCap - The market cap of the coin
 * @property {PricingResult} liquidity - The liquidity of the coin
 * @property {Address} pool - Pool address
 * @property {Slot0Result} poolState - Current state of the UniswapV3 pool
 * @property {Address[]} owners - List of owners for the coin
 * @property {Address} payoutRecipient - The payout recipient address
 */
export type OnchainCoinDetails = {
    balance: bigint;
    marketCap: PricingResult;
    liquidity: PricingResult;
    pool: Address;
    poolState: Slot0Result;
    owners: readonly Address[];
    payoutRecipient: Address;
};
/**
 * Gets the current state of a coin for a user
 * @param {Object} params - The query parameters
 * @param {Address} params.coin - The coin contract address
 * @param {Address} params.user - The user address to check balance for
 * @param {PublicClient} params.publicClient - The viem public client instance
 * @returns {Promise<OnchainCoinDetails>} The coin's current state
 */
export declare function getOnchainCoinDetails({ coin, user, publicClient, }: {
    coin: Address;
    user?: Address;
    publicClient: GenericPublicClient;
}): Promise<OnchainCoinDetails>;
export {};
//# sourceMappingURL=getOnchainCoinDetails.d.ts.map