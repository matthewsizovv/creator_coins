import { Address, SimulateContractParameters, WalletClient } from "viem";
import { GenericPublicClient } from "src/utils/genericPublicClient";
export type UpdatePayoutRecipientArgs = {
    coin: Address;
    newPayoutRecipient: string;
};
export declare function updatePayoutRecipientCall({ newPayoutRecipient, coin, }: UpdatePayoutRecipientArgs): SimulateContractParameters;
export declare function updatePayoutRecipient(args: UpdatePayoutRecipientArgs, walletClient: WalletClient, publicClient: GenericPublicClient): Promise<{
    hash: `0x${string}`;
    receipt: any;
    payoutRecipientUpdated: ({
        address: Address;
        blockHash: `0x${string}`;
        blockNumber: bigint;
        data: import("viem").Hex;
        logIndex: number;
        transactionHash: `0x${string}`;
        transactionIndex: number;
        removed: boolean;
    } & {
        args: {
            caller: `0x${string}`;
            prevRecipient: `0x${string}`;
            newRecipient: `0x${string}`;
        };
        eventName: "CoinPayoutRecipientUpdated";
        topics: [`0x${string}`, `0x${string}`, `0x${string}`, `0x${string}`];
    }) | undefined;
}>;
//# sourceMappingURL=updatePayoutRecipient.d.ts.map